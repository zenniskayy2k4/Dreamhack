from itertools import permutations

def generate_keystream(H, M, length):
    """T·∫°o keystream v·ªõi ƒë·ªô d√†i cho tr∆∞·ªõc"""
    h, m = 0, 0
    keystream = []
    for _ in range(length):
        keystream.append(8 * H[h] + M[m])
        m += 1
        if m >= 8:
            h += 1
            h %= 8
            m = 0
    return keystream

def is_valid_flag_char(byte_val):
    """Ki·ªÉm tra xem byte c√≥ h·ª£p l·ªá trong flag kh√¥ng"""
    return ((0x41 <= byte_val <= 0x5a) or  # A-Z
            (0x61 <= byte_val <= 0x7a) or  # a-z
            (byte_val == 0x5f))             # _

def find_possible_hm_pairs(target_value):
    """T√¨m t·∫•t c·∫£ c·∫∑p (h, m) sao cho 8*h + m = target_value"""
    pairs = []
    for h in range(8):
        for m in range(8):
            if 8 * h + m == target_value:
                pairs.append((h, m))
    return pairs

def solve_optimized():
    # ƒê·ªçc ciphertext
    with open("flag.txt.enc", "rb") as f:
        ciphertext = f.read()
    
    print(f"Ciphertext length: {len(ciphertext)}")
    print(f"Ciphertext (hex): {ciphertext.hex()}")
    
    # Bi·∫øt r·∫±ng plaintext b·∫Øt ƒë·∫ßu b·∫±ng "DH{" v√† k·∫øt th√∫c b·∫±ng "}"
    known_start = b"DH{"
    known_end = ord('}')
    
    # T√≠nh keystream c·∫ßn thi·∫øt
    target_keystream = []
    for i in range(3):
        target_keystream.append(ciphertext[i] ^ known_start[i])
    target_keystream.append(ciphertext[-1] ^ known_end)  # Byte cu·ªëi c√πng
    
    print(f"Target keystream positions [0,1,2,{len(ciphertext)-1}]: {target_keystream}")
    
    # T√¨m c√°c c·∫∑p (h,m) c√≥ th·ªÉ cho t·ª´ng v·ªã tr√≠ keystream
    possible_pairs = []
    for i, target in enumerate(target_keystream[:3]):
        pairs = find_possible_hm_pairs(target)
        possible_pairs.append(pairs)
        print(f"Position {i}: target={target}, possible (h,m) pairs: {pairs}")
    
    # Ph√¢n t√≠ch v·ªã tr√≠ trong clock cho 3 byte ƒë·∫ßu
    # Position 0: h=0, m=0 -> c·∫ßn H[0], M[0]
    # Position 1: h=0, m=1 -> c·∫ßn H[0], M[1] 
    # Position 2: h=0, m=2 -> c·∫ßn H[0], M[2]
    
    print("\nAnalyzing constraints...")
    
    # L·∫•y t·∫•t c·∫£ combinations c√≥ th·ªÉ cho 3 v·ªã tr√≠ ƒë·∫ßu
    valid_combinations = []
    
    for pair0 in possible_pairs[0]:  # (H[0], M[0])
        for pair1 in possible_pairs[1]:  # (H[0], M[1])
            for pair2 in possible_pairs[2]:  # (H[0], M[2])
                h0_from_pos0, m0 = pair0
                h0_from_pos1, m1 = pair1
                h0_from_pos2, m2 = pair2
                
                # H[0] ph·∫£i gi·ªëng nhau ·ªü c·∫£ 3 v·ªã tr√≠
                if h0_from_pos0 == h0_from_pos1 == h0_from_pos2:
                    h0 = h0_from_pos0
                    # Ki·ªÉm tra xem M[0], M[1], M[2] c√≥ kh√°c nhau kh√¥ng (v√¨ M l√† permutation)
                    if len(set([m0, m1, m2])) == 3:
                        valid_combinations.append((h0, m0, m1, m2))
    
    print(f"Found {len(valid_combinations)} valid combinations for first 3 positions")
    
    # V·ªõi m·ªói combination h·ª£p l·ªá, th·ª≠ t·∫°o c√°c permutation ph√π h·ª£p
    for combo in valid_combinations:
        h0, m0, m1, m2 = combo
        print(f"\nTrying combination: H[0]={h0}, M[0]={m0}, M[1]={m1}, M[2]={m2}")
        
        # T·∫°o danh s√°ch c√°c gi√° tr·ªã c√≤n l·∫°i cho M
        remaining_m = [x for x in range(8) if x not in [m0, m1, m2]]
        
        # Th·ª≠ t·∫•t c·∫£ permutations c·ªßa H v·ªõi H[0] c·ªë ƒë·ªãnh
        remaining_h = [x for x in range(8) if x != h0]
        
        for h_perm in permutations(remaining_h):
            H = [h0] + list(h_perm)
            
            for m_perm in permutations(remaining_m):
                M = [m0, m1, m2] + list(m_perm)
                
                # Ki·ªÉm tra v·ªõi keystream ƒë∆∞·ª£c t·∫°o
                keystream = generate_keystream(H, M, len(ciphertext))
                
                # Ki·ªÉm tra 4 v·ªã tr√≠ ƒë√£ bi·∫øt
                if (keystream[0] != target_keystream[0] or 
                    keystream[1] != target_keystream[1] or 
                    keystream[2] != target_keystream[2] or
                    keystream[-1] != target_keystream[3]):
                    continue
                
                # Gi·∫£i m√£ v√† ki·ªÉm tra t√≠nh h·ª£p l·ªá
                plaintext = []
                valid = True
                
                for i in range(len(ciphertext)):
                    decrypted_byte = ciphertext[i] ^ keystream[i]
                    
                    # Ki·ªÉm tra format flag
                    if i == 0 and decrypted_byte != ord('D'):
                        valid = False
                        break
                    elif i == 1 and decrypted_byte != ord('H'):
                        valid = False
                        break
                    elif i == 2 and decrypted_byte != ord('{'):
                        valid = False
                        break
                    elif i == len(ciphertext) - 1 and decrypted_byte != ord('}'):
                        valid = False
                        break
                    elif 3 <= i <= len(ciphertext) - 2 and not is_valid_flag_char(decrypted_byte):
                        valid = False
                        break
                    
                    plaintext.append(decrypted_byte)
                
                if valid:
                    flag = bytes(plaintext).decode('ascii')
                    print(f"\nüéâ FOUND FLAG! üéâ")
                    print(f"H permutation: {H}")
                    print(f"M permutation: {M}")
                    print(f"Flag: {flag}")
                    return flag
    
    print("No valid flag found with optimized method!")
    return None

def solve_bruteforce_backup():
    """Backup brute force method n·∫øu optimized method kh√¥ng work"""
    print("\nFalling back to brute force method...")
    
    with open("flag.txt.enc", "rb") as f:
        ciphertext = f.read()
    
    known_plaintext = b"DH{"
    known_keystream = []
    for i in range(3):
        known_keystream.append(ciphertext[i] ^ known_plaintext[i])
    
    base_list = list(range(8))
    count = 0
    
    for H in permutations(base_list):
        for M in permutations(base_list):
            count += 1
            if count % 100000 == 0:
                print(f"Tried {count} combinations...")
            
            keystream = generate_keystream(H, M, len(ciphertext))
            
            if keystream[:3] != known_keystream:
                continue
            
            # Gi·∫£i m√£ v√† ki·ªÉm tra
            plaintext = []
            valid = True
            
            for i in range(len(ciphertext)):
                decrypted_byte = ciphertext[i] ^ keystream[i]
                
                if i == 0 and decrypted_byte != ord('D'):
                    valid = False
                    break
                elif i == 1 and decrypted_byte != ord('H'):
                    valid = False
                    break
                elif i == 2 and decrypted_byte != ord('{'):
                    valid = False
                    break
                elif i == len(ciphertext) - 1 and decrypted_byte != ord('}'):
                    valid = False
                    break
                elif 3 <= i <= len(ciphertext) - 2 and not is_valid_flag_char(decrypted_byte):
                    valid = False
                    break
                
                plaintext.append(decrypted_byte)
            
            if valid:
                flag = bytes(plaintext).decode('ascii')
                print(f"\nüéâ FOUND FLAG! üéâ")
                print(f"H permutation: {H}")
                print(f"M permutation: {M}")
                print(f"Flag: {flag}")
                return flag
            
            # Tho√°t s·ªõm n·∫øu ƒë√£ th·ª≠ qu√° nhi·ªÅu
            if count > 10000000:  # Gi·ªõi h·∫°n 10M combinations
                print("Reached limit, stopping...")
                break
        else:
            continue
        break
    
    return None

if __name__ == "__main__":
    # Th·ª≠ method t·ªëi ∆∞u tr∆∞·ªõc
    result = solve_optimized()
    
    # N·∫øu kh√¥ng t√¨m th·∫•y, d√πng brute force
    if result is None:
        result = solve_bruteforce_backup()
    
    if result is None:
        print("Could not find the flag!")